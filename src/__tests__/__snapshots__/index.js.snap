// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`source 1. source: 1. source 1`] = `

let MySource
function ScopedFunction () {
  /* @source MySource */ const foo = 'bar' /* @source MySource */
}

      ↓ ↓ ↓ ↓ ↓ ↓

let MySource = "const foo = 'bar' ";

function ScopedFunction() {
  /* @source MySource */
  const foo = 'bar';
  /* @source MySource */
}

`;

exports[`source 2. source: 2. source 1`] = `

function ScopedFunction () {
  let MySource
  /* @source MySource */ const foo = 'bar' /* @source MySource */
}

      ↓ ↓ ↓ ↓ ↓ ↓

function ScopedFunction() {
  let MySource = "const foo = 'bar' ";
  /* @source MySource */

  const foo = 'bar';
  /* @source MySource */
}

`;

exports[`source 3. source: 3. source 1`] = `

let MySource
/* @source MySource */ const foo = 'bar' /* @source MySource */

      ↓ ↓ ↓ ↓ ↓ ↓

let MySource = "const foo = 'bar' ";
/* @source MySource */

const foo = 'bar';
/* @source MySource */

`;

exports[`source 4. source: 4. source 1`] = `

let MySource
/* @source MySource */ const foo = 'bar' /* @source MySource */

      ↓ ↓ ↓ ↓ ↓ ↓

let MySource = "const foo = 'bar' ";
/* @source MySource */

const foo = 'bar';
/* @source MySource */

`;

exports[`source 5. source: 5. source 1`] = `

let MySource
// @source MySource
const MyComponent = () => (
  console.log('Hello!')
)
// @source MySource

      ↓ ↓ ↓ ↓ ↓ ↓

let MySource = "const MyComponent = () => (\\n  console.log('Hello!')\\n)"; // @source MySource

const MyComponent = () => console.log('Hello!'); // @source MySource

`;

exports[`source 6. source: 6. source 1`] = `

let MySource
// @source MySource
const MyComponent = () => (
  console.log('Hello!')
)
// @source MySource

      ↓ ↓ ↓ ↓ ↓ ↓

let MySource = "const MyComponent = () => (\\n  console.log('Hello!')\\n)"; // @source MySource

const MyComponent = () => console.log('Hello!'); // @source MySource

`;

exports[`source 7. source: 7. source 1`] = `

let MySource
let MyOtherSource
// @source MySource
const MyComponent = () => (
  console.log('Hello!')
)
// @source MySource
// @source MyOtherSource
const MyComponent2 = () => (
  console.log('Hello 2!')
)
// @source MyOtherSource

      ↓ ↓ ↓ ↓ ↓ ↓

let MySource = "const MyComponent = () => (\\n  console.log('Hello!')\\n)";
let MyOtherSource = "const MyComponent2 = () => (\\n  console.log('Hello 2!')\\n)"; // @source MySource

const MyComponent = () => console.log('Hello!'); // @source MySource
// @source MyOtherSource


const MyComponent2 = () => console.log('Hello 2!'); // @source MyOtherSource

`;

exports[`source 8. source: 8. source 1`] = `

let MySource
// @source MySource
// @source MySource

      ↓ ↓ ↓ ↓ ↓ ↓

let MySource = ""; // @source MySource
// @source MySource

`;

exports[`source 9. source: 9. source 1`] = `

let MySource
// @source MySource
// @source MySource

      ↓ ↓ ↓ ↓ ↓ ↓

let MySource = ""; // @source MySource
// @source MySource

`;

exports[`source 10. source: 10. source 1`] = `

let MySource = 'I should be the here'
/* @source */ const foo = 'bar' /* @source */

      ↓ ↓ ↓ ↓ ↓ ↓

let MySource = 'I should be the here';
/* @source */

const foo = 'bar';
/* @source */

`;

exports[`source 11. source: 11. source 1`] = `

let MySource = 'I should be the here'
/* other comment */ const foo = 'bar' /* other comment */

      ↓ ↓ ↓ ↓ ↓ ↓

let MySource = 'I should be the here';
/* other comment */

const foo = 'bar';
/* other comment */

`;

exports[`source 12. source: 12. source 1`] = `

/* other comment */ const foo = 'bar' /* other comment */

      ↓ ↓ ↓ ↓ ↓ ↓

/* other comment */
const foo = 'bar';
/* other comment */

`;

exports[`source 13. source: 13. source 1`] = `

let MySources
let MySource2
let MySource3
let MySource4

/* @source MySources */

if (true) {
  // do this
}
const MyComponent = () => (
  /* @source MySource2 */
  console.log('Hello!')
  /* @source MySource2 */

)
const AnotherComponent = () => (
  // @source MySource3
  console.log('Hello Again!')
  // @source MySource3
)

/* @source MySource4 */ const aVariable = 'Hello!' /* @source MySource4 */

/* @source MySources */

const noSource = 'please!'

      ↓ ↓ ↓ ↓ ↓ ↓

let MySources = "if (true) {\\n  // do this\\n}\\nconst MyComponent = () => (\\n  /* @source MySource2 */\\n  console.log('Hello!')\\n  /* @source MySource2 */\\n)\\nconst AnotherComponent = () => (\\n  // @source MySource3\\n  console.log('Hello Again!')\\n  // @source MySource3\\n)\\n/* @source MySource4 */ const aVariable = 'Hello!' /* @source MySource4 */";
let MySource2 = "console.log('Hello!')";
let MySource3 = "console.log('Hello Again!')";
let MySource4 = "const aVariable = 'Hello!' ";
/* @source MySources */

if (true) {// do this
}

const MyComponent = () => console.log('Hello!');

const AnotherComponent = () => console.log('Hello Again!');
/* @source MySource4 */


const aVariable = 'Hello!';
/* @source MySource4 */

/* @source MySources */

const noSource = 'please!';

`;

exports[`source 14. source: 14. source 1`] = `

let MySource
const MyComponent = () => (
  // @source MySource
  console.log('Hello!')
  // @source MySource
)

      ↓ ↓ ↓ ↓ ↓ ↓

let MySource = "console.log('Hello!')";

const MyComponent = () => console.log('Hello!');

`;

exports[`source 15. source: 15. source 1`] = `

const MySource = ''
  
const MyComponent = () => (
  // @source MySource
  console.log('Hello!')
  // @source MySource
)

      ↓ ↓ ↓ ↓ ↓ ↓

const MySource = "console.log('Hello!')";

const MyComponent = () => console.log('Hello!');

`;

exports[`source 16. source: 16. source 1`] = `

let MyJSXSource
const MyComponent = () => (
  // @source MyJSXSource
  <div>Hello!</div>
  // @source MyJSXSource
)

      ↓ ↓ ↓ ↓ ↓ ↓

let MyJSXSource = "<div>Hello!</div>";

const MyComponent = () => React.createElement("div", null, "Hello!");

`;

exports[`source 17. source: 17. source 1`] = `

let sourceCode

console.log(sourceCode)

export default () => (
  <Sidebar>
    <ChartConfig dataType="time">
      {({ data }) => (
        // @source sourceCode
        <Chart data={data}>
          <Axis primary type="time" position="bottom" />
          <Axis type="linear" position="left" stacked />
          <Series type={Area} />
          <Tooltip />
        </Chart>
        // @source sourceCode
      )}
    </ChartConfig>
    <Code source={sourceCode} />
  </Sidebar>
)

      ↓ ↓ ↓ ↓ ↓ ↓

let sourceCode = "<Chart data={data}>\\n  <Axis primary type=\\"time\\" position=\\"bottom\\" />\\n  <Axis type=\\"linear\\" position=\\"left\\" stacked />\\n  <Series type={Area} />\\n  <Tooltip />\\n</Chart>";
console.log(sourceCode);
export default (() => React.createElement(Sidebar, null, React.createElement(ChartConfig, {
  dataType: "time"
}, ({
  data
}) => React.createElement(Chart, {
  data: data
}, React.createElement(Axis, {
  primary: true,
  type: "time",
  position: "bottom"
}), React.createElement(Axis, {
  type: "linear",
  position: "left",
  stacked: true
}), React.createElement(Series, {
  type: Area
}), React.createElement(Tooltip, null))), React.createElement(Code, {
  source: sourceCode
})));

`;

exports[`source 18. source: 18. source 1`] = `

import React from 'react'

      //
      
      import Sidebar from 'components/Sidebar'
      import ChartConfig from 'components/ChartConfig'
      import Code from 'components/Code'
      
      import { Chart, Axis, Series, Tooltip, Area } from '../../../src'
      
      const sourceCode = ''
      
      export default () => (
        <Sidebar>
          <ChartConfig dataType="time">
            {({ data }) => (
              // @source sourceCode
              <Chart data={data}>
                <Axis primary type="time" position="bottom" />
                <Axis type="linear" position="left" stacked />
                <Series type={Area} />
                <Tooltip />
              </Chart>
              // @source sourceCode
            )}
          </ChartConfig>
          <Code source={sourceCode} />
        </Sidebar>
      )

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react'; //

import Sidebar from 'components/Sidebar';
import ChartConfig from 'components/ChartConfig';
import Code from 'components/Code';
import { Chart, Axis, Series, Tooltip, Area } from '../../../src';
const sourceCode = "<Chart data={data}>\\n  <Axis primary type=\\"time\\" position=\\"bottom\\" />\\n  <Axis type=\\"linear\\" position=\\"left\\" stacked />\\n  <Series type={Area} />\\n  <Tooltip />\\n</Chart>";
export default (() => React.createElement(Sidebar, null, React.createElement(ChartConfig, {
  dataType: "time"
}, ({
  data
}) => React.createElement(Chart, {
  data: data
}, React.createElement(Axis, {
  primary: true,
  type: "time",
  position: "bottom"
}), React.createElement(Axis, {
  type: "linear",
  position: "left",
  stacked: true
}), React.createElement(Series, {
  type: Area
}), React.createElement(Tooltip, null))), React.createElement(Code, {
  source: sourceCode
})));

`;

exports[`source 20. source: 20. source 1`] = `

import React from 'react'

    //
    
    import useChartConfig from 'hooks/useChartConfig'
    import Box from 'components/Box'
    import { Chart } from '../../../dist'
    
    let sourceCode
    
    // @source sourceCode

    export default () => {
      const { data, randomizeData } = useChartConfig({
        series: 10
      })
      const series = React.useMemo(
        () => ({
          type: 'area'
        }),
        []
      )
      const axes = React.useMemo(
        () => [
          { primary: true, position: 'bottom', type: 'time' },
          { position: 'left', type: 'linear', stacked: true }
        ],
        []
      )
      return (
        <>
          <button onClick={randomizeData}>Randomize Data</button>
          <br />
          <br />
          <Box>
            <Chart data={data} series={series} axes={axes} tooltip />
          </Box>
          <br />
          <pre>
            <code>{sourceCode}</code>
          </pre>
        </>
      )
    }
    // @source sourceCode

      ↓ ↓ ↓ ↓ ↓ ↓

import React from 'react'; //

import useChartConfig from 'hooks/useChartConfig';
import Box from 'components/Box';
import { Chart } from '../../../dist';
let sourceCode = "export default () => {\\n  const { data, randomizeData } = useChartConfig({\\n    series: 10\\n  })\\n  const series = React.useMemo(\\n    () => ({\\n      type: 'area'\\n    }),\\n    []\\n  )\\n  const axes = React.useMemo(\\n    () => [\\n      { primary: true, position: 'bottom', type: 'time' },\\n      { position: 'left', type: 'linear', stacked: true }\\n    ],\\n    []\\n  )\\n  return (\\n    <>\\n      <button onClick={randomizeData}>Randomize Data</button>\\n      <br />\\n      <br />\\n      <Box>\\n        <Chart data={data} series={series} axes={axes} tooltip />\\n      </Box>\\n      <br />\\n      <pre>\\n        <code>{sourceCode}</code>\\n      </pre>\\n    </>\\n  )\\n}"; // @source sourceCode

export default (() => {
  const {
    data,
    randomizeData
  } = useChartConfig({
    series: 10
  });
  const series = React.useMemo(() => ({
    type: 'area'
  }), []);
  const axes = React.useMemo(() => [{
    primary: true,
    position: 'bottom',
    type: 'time'
  }, {
    position: 'left',
    type: 'linear',
    stacked: true
  }], []);
  return React.createElement(React.Fragment, null, React.createElement("button", {
    onClick: randomizeData
  }, "Randomize Data"), React.createElement("br", null), React.createElement("br", null), React.createElement(Box, null, React.createElement(Chart, {
    data: data,
    series: series,
    axes: axes,
    tooltip: true
  })), React.createElement("br", null), React.createElement("pre", null, React.createElement("code", null, sourceCode)));
}); // @source sourceCode

`;
